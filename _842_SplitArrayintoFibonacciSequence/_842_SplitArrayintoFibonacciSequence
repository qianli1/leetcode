#include <vector>
#include <string>
#include <stack>
#include <map>

using namespace std;
/**
* 本代码来自 CSON 官方视频课程，由 @CSON 提供
* 题目来源： http://leetcode.com
* CSON 致力于在 CS 领域内帮助中国人找到工作，让更多海内外国人受益
* 讲师： Edward Shi
* 官方网站： https://cspiration.com
* 版权归 CSON 所有， 禁止 转载！
*/

class _842_SplitArrayintoFibonacciSequence {
    /**
    * 842. Split Array into Fibonacci Sequence
    * Given a string S of digits, such as S = "123456579", we can split it into a Fibonacci-like sequence [123, 456, 579].

    Formally, a Fibonacci-like sequence is a list F of non-negative integers such that:

    0 <= F[i] <= 2^31 - 1, (that is, each integer fits a 32-bit signed integer type);
    F.length >= 3;
    and F[i] + F[i+1] = F[i+2] for all 0 <= i < F.length - 2.
    Also, note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.

    Return any Fibonacci-like sequence split from S, or return [] if it cannot be done.

    Example 1:

    Input: "123456579"
    Output: [123,456,579]
    Example 2:

    Input: "11235813"
    Output: [1,1,2,3,5,8,13]
    Example 3:

    Input: "112358130"
    Output: []
    Explanation: The task is impossible.
    Example 4:

    Input: "0123"
    Output: []
    Explanation: Leading zeroes are not allowed, so "01", "2", "3" is not valid.
    Example 5:

    Input: "1101111"
    Output: [110, 1, 111]
    Explanation: The output [11, 0, 11, 11] would also be accepted.

    */
 public:
  vector<int> splitIntoFibonacci(string S) {
    vector<int> res;
    helper(res, S, 0);
    return res;
  }

  bool helper(vector<int>& res, string S, int start) {
    if (start == S.size() && res.size() >= 3) {
        return true;
    }
    
    long num = 0;
    for (int i = start; i < S.size(); i++) {
        if (S[start] == '0' && i > start) {
            break;
        }
        num = num * 10 + (S[i] - '0');
        if (num > INT_MAX) {
            break;
        }
        if (res.size() >= 2 && (long)res.back() + (long)res[res.size() - 2] < num) {
            break;
        }
        if (res.size() <= 1 || (long)res.back() + (long)res[res.size() - 2] == num) {
            res.push_back((int) num);
            if (helper(res, S, i + 1)) {
                return true;
            }
            res.pop_back();
        }
    }
    return false;
  }
};
