#include <vector>
#include <string>
#include <stack>
#include <map>

using namespace std;
/**
* 本代码来自 CSON 官方视频课程，由 @CSON 提供
* 题目来源： http://leetcode.com
* CSON 致力于在 CS 领域内帮助中国人找到工作，让更多海内外国人受益
* 讲师： Edward Shi
* 官方网站： https://cspiration.com
* 版权归 CSON 所有， 禁止 转载！
*/

class _845_LongestMountaininArray {
    /**
    * 845. Longest Mountain in Array
    * Let's call any (contiguous) subarray B (of A) a mountain if the following properties hold:

    B.length >= 3
    There exists some 0 < i < B.length - 1 such that B[0] < B[1] < ... B[i-1] < B[i] > B[i+1] > ... > B[B.length - 1]
    (Note that B could be any subarray of A, including the entire array A.)

    Given an array A of integers, return the length of the longest mountain. 

    Return 0 if there is no mountain.

    Example 1:

    Input: [2,1,4,7,3,2,5]
    Output: 5
    Explanation: The largest mountain is [1,4,7,3,2] which has length 5.
    Example 2:

    Input: [2,2,2]
    Output: 0
    Explanation: There is no mountain.

    Time : O(n);
    Space : O(1);

    */
 public:
  int longestMountain(vector<int>& A) {
    int n = A.size();
    if (n < 3) {
        return 0;
    }
    
    int left = 0;
    int res = 0;
    while (left < n - 2) {
        while (left < n - 1 && A[left] >= A[left + 1]) {
            left++;
        }
        int right = left + 1;
        while (right < n - 1 && A[right] < A[right + 1]) {
            right++;
        }
        while (right < n - 1 && A[right] > A[right + 1]) {
            right++;
            res = max(res, right - left + 1);
        }
        left = right;
    }
    return res;
  }
};
