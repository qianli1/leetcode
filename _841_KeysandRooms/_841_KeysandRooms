#include <vector>
#include <string>
#include <stack>
#include <unordered_set>

using namespace std;
/**
* 本代码来自 CSON 官方视频课程，由 @CSON 提供
* 题目来源： http://leetcode.com
* CSON 致力于在 CS 领域内帮助中国人找到工作，让更多海内外国人受益
* 讲师： Edward Shi
* 官方网站： https://cspiration.com
* 版权归 CSON 所有， 禁止 转载！
*/

class _841_KeysandRooms {
    /**
    * 841. Keys and Rooms
    * There are N rooms and you start in room 0.  Each room has a distinct number in 0, 1, 2, ..., N-1, and each room may have some 
    * keys to access the next room. 

    Formally, each room i has a list of keys rooms[i], and each key rooms[i][j] is an integer in [0, 1, ..., N-1] where N = rooms.length.  
    A key rooms[i][j] = v opens the room with number v.

    Initially, all the rooms start locked (except for room 0). 

    You can walk back and forth between rooms freely.

    Return true if and only if you can enter every room.

    Example 1:

    Input: [[1],[2],[3],[]]
    Output: true
    Explanation:  
    We start in room 0, and pick up key 1.
    We then go to room 1, and pick up key 2.
    We then go to room 2, and pick up key 3.
    We then go to room 3.  Since we were able to go to every room, we return true.
    Example 2:

    Input: [[1,3],[3,0,1],[2],[0]]
    Output: false
    Explanation: We can't enter the room with number 2.

    time : O(N + E);
    space : O(N);
    */
 public:
  bool canVisitAllRooms(vector<vector<int>>& rooms) {
    unordered_set<int> visited;
    helper(rooms, 0, visited);
    return visited.size() == rooms.size();
  }

  void helper(vector<vector<int>>& rooms, int room, unordered_set<int> &visited) {
    visited.insert(room);
    for (int neighbor : rooms[room]) {
        if (!visited.count(neighbor)) {
            helper(rooms, neighbor, visited);
        }
    }
    return;
  }

  bool canVisitAllRooms2(vector<vector<int>>& rooms) {
    unordered_set<int> visited;
    visited.insert(0);
    stack<int> st;
    st.push(0);
    
    while (!st.empty()) {
        int cur = st.top();
        st.pop();
        for (int neighbor : rooms[cur]) {
            if (!visited.count(neighbor)) {
                visited.insert(neighbor);
                st.push(neighbor);
            }
        }
    }
    return visited.size() == rooms.size();
  }
};
