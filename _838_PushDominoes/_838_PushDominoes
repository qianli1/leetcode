#include <vector>
#include <string>
#include <unordered_map>

using namespace std;
/**
* 本代码来自 CSON 官方视频课程，由 @CSON 提供
* 题目来源： http://leetcode.com
* CSON 致力于在 CS 领域内帮助中国人找到工作，让更多海内外国人受益
* 讲师： Edward Shi
* 官方网站： https://cspiration.com
* 版权归 CSON 所有， 禁止 转载！
*/

class _838_PushDominoes {
    /**
    * 838. Push Dominoes
    * There are N dominoes in a line, and we place each domino vertically upright.

    In the beginning, we simultaneously push some of the dominoes either to the left or to the right.
    After each second, each domino that is falling to the left pushes the adjacent domino on the left.

    Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.

    When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.

    For the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.

    Given a string "S" representing the initial state. S[i] = 'L', if the i-th domino has been pushed to the left; S[i] = 'R', if the i-th 
    domino has been pushed to the right; S[i] = '.', if the i-th domino has not been pushed.

    Return a string representing the final state. 

    Example 1:

    Input: ".L.R...LR..L.."
    Output: "LL.RR.LLRRLL.."
    Example 2:

    Input: "RR.L"
    Output: "RR.L"
    Explanation: The first domino expends no additional force on the second domino.

    time : O(n);
    space : O(n);
    */
 public:
  string pushDominoes(string dominoes) {
    dominoes = 'L' + dominoes + 'R';
    string res;
    for (int i = 0, j = 1; j < dominoes.size(); j++) {
        if (dominoes[j] == '.') {
            continue;
        }
        int count = j - i - 1;
        if (i > 0) {
            res += dominoes[i];
        }
        if (dominoes[i] == dominoes[j]) {
            for (int k = 0; k < count; k++) {
                res += dominoes[j];
            }
        } else if (dominoes[i] == 'L' && dominoes[j] == 'R') {
            for (int k = 0; k < count; k++) {
                res += '.';
            }
        } else {
            for (int k = 0; k < count / 2; k++) {
                res += 'R';
            }
            if (count % 2 == 1) {
                res += '.';
            }
            for (int k = 0; k < count / 2; k++) {
                res += 'L';
            }
        }
        i = j;
    }
    return res;
  }
};
