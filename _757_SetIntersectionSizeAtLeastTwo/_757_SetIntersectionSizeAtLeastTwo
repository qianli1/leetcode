#include <vector>
#include <string>
#include <unordered_set>

using namespace std;
/**
* 本代码来自 CSON 官方视频课程，由 @CSON 提供
* 题目来源： http://leetcode.com
* CSON 致力于在 CS 领域内帮助中国人找到工作，让更多海内外国人受益
* 讲师： Edward Shi
* 官方网站： https://cspiration.com
* 版权归 CSON 所有， 禁止 转载！
*/

class _757_SetIntersectionSizeAtLeastTwo {
    /**
    * 757. Set Intersection Size At Least Two
    * An integer interval [a, b] (for integers a < b) is a set of all consecutive integers from a to b, including a and b.

    Find the minimum size of a set S such that for every integer interval A in intervals, the intersection of S with A has size at least 2.

    Example 1:
    Input: intervals = [[1, 3], [1, 4], [2, 5], [3, 5]]
    Output: 3
    Explanation:
    Consider the set S = {2, 3, 4}.  For each interval, there are at least 2 elements from S in the interval.
    Also, there isn't a smaller size set that fulfills the above condition.
    Thus, we output the size of this set, which is 3.
    Example 2:
    Input: intervals = [[1, 2], [2, 3], [2, 4], [4, 5]]
    Output: 5
    Explanation:
    An example of a minimum sized set is {1, 2, 3, 4, 5}.

    time : O(nlogn);
    space : O(1);
    */
 public:
  int intersectionSizeTwo(vector<vector<int>>& intervals) {
    sort(intervals.begin(), intervals.end(), [](vector<int> &a, vector<int> &b) {
        return a[1] != b[1] ? (b[1] > a[1]) : (a[0] > b[0]);
    });

    int secondMax = -2, max = -1;
    int res = 0;
    
    for (auto interval : intervals) {
        int start = interval[0];
        int end = interval[1];
        if (start <= secondMax) {
            continue;
        } else if (start <= max) {
            res++;
            secondMax = max;
            max = end;
        } else {
            res += 2;
            secondMax = end - 1;
            max = end;
        }
    }
    return res;
  }
};
