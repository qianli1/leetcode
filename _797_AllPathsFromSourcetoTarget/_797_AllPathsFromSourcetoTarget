#include <vector>
#include <string>
#include <unordered_set>

using namespace std;
/**
* 本代码来自 CSON 官方视频课程，由 @CSON 提供
* 题目来源： http://leetcode.com
* CSON 致力于在 CS 领域内帮助中国人找到工作，让更多海内外国人受益
* 讲师： Edward Shi
* 官方网站： https://cspiration.com
* 版权归 CSON 所有， 禁止 转载！
*/

class _797_AllPathsFromSourcetoTarget {
    /**
    * 797. All Paths From Source to Target
    * Given a directed acyclic graph of N nodes. Find all possible paths from node 0 to node N-1, and return them in any order.

    The graph is given as follows:  the nodes are 0, 1, ..., graph.length - 1.  graph[i] is a list of all nodes j for which the edge (i, j) exists.

    Example:
    Input: [[1,2],[3],[3],[]]
    Output: [[0,1,3],[0,2,3]]
    Explanation: The graph looks like this:
    0--->1
    |    |
    v    v
    2--->3
    There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.

    time : O(2^n);
    space : O(2^n);
    */
 public:
  vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
    vector<vector<int>> res;
    vector<int> list;
    helper(res, graph, 0, graph.size() - 1, list);
    return res;
  }

  void helper(vector<vector<int>>& res, vector<vector<int>>& graph, int cur, int des, vector<int>& list) {
    list.push_back(cur);
    if (cur == des) {
        res.push_back(list);
    } else for (int neighbor : graph[cur]) {
        helper(res, graph, neighbor, des, list);
    }
    list.pop_back();
  }
};
