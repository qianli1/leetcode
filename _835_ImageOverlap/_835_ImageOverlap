#include <vector>
#include <string>
#include <unordered_map>

using namespace std;
/**
* 本代码来自 CSON 官方视频课程，由 @CSON 提供
* 题目来源： http://leetcode.com
* CSON 致力于在 CS 领域内帮助中国人找到工作，让更多海内外国人受益
* 讲师： Edward Shi
* 官方网站： https://cspiration.com
* 版权归 CSON 所有， 禁止 转载！
*/

class _835_ImageOverlap {
    /**
    * 835. Image Overlap
    * You are given two images img1 and img2 both of size n x n, represented as binary, square matrices of the same size. (A binary 
    * matrix has only 0s and 1s as values.)

    We translate one image however we choose (sliding it left, right, up, or down any number of units), and place it on top of the 
    other image.  After, the overlap of this translation is the number of positions that have a 1 in both images.

    (Note also that a translation does not include any kind of rotation.)

    What is the largest possible overlap?

    Example 1:
    Input: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]
    Output: 3
    Explanation: We slide img1 to right by 1 unit and down by 1 unit.

    time : O(n^4);
    space : O(n^2);
    */
 public:
  int largestOverlap(vector<vector<int>>& img1, vector<vector<int>>& img2) {
    int n = img1.size();
    vector<vector<int>> p1;
    vector<vector<int>> p2;
    for (int i = 0; i < n * n; i++) {
        if (img1[i / n][i % n] == 1) {
            p1.push_back({i / n, i % n});
        }
        if (img2[i / n][i % n] == 1) {
            p2.push_back({i / n, i % n});
        }
    }
    
    unordered_map<string, int> mp;
    int res = 0;
    for (auto a : p1) {
        for (auto b : p2) {
            string diff = to_string(a[0] - b[0]) + "," + to_string(a[1] - b[1]);
            mp[diff]++;
            res = max(res, mp[diff]);
        }
    }
    return res;
  }
};
